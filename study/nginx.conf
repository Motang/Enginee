#运行用户
user  motang;
worker_processes  1;

#全局错误日志及PID文件
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

#工作模式及连接上限
events {
    #epoll是多路复用IO(I/O Multiplexing)中的一种方式,
    #仅用于linux2.6以上内核,可以大大提高nginx的性能
    use   epoll;

    #单个后台worker process进程的最大并发链接数 
    worker_connections  1024;

    # 并发总数是 worker_processes 和 worker_connections 的乘积
    # 即 max_clients = worker_processes * worker_connections
    # 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4  为什么
    # 为什么上面反向代理要除以4，应该说是一个经验值
    # 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000
    # worker_connections 值的设置跟物理内存大小有关
    # 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数
    # 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右
    # 我们来看看360M内存的VPS可以打开的文件句柄数是多少：
    # $ cat /proc/sys/fs/file-max
    # 输出 34336
    # 32000 < 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内
    # 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置
    # 使得并发总数小于操作系统可以打开的最大文件数目
    # 其实质也就是根据主机的物理CPU和内存进行配置
    # 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。
    # ulimit -SHn 65535
}

# load modules compiled as Dynamic Shared Object (DSO)
#
#dso {
#    load ngx_http_fastcgi_module.so;
#    load ngx_http_rewrite_module.so;
#}

http {
    #设定mime类型,类型由mime.type文件定义
    include       mime.types;
    default_type  application/octet-stream;

    #设定日志格式
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$upstream_addr $upstream_response_time $request_time" ' 
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，
    #对于普通应用，必须设为 on,
    #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，
    #以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    sendfile        on;
    #tcp_nopush     on;

    #自定义设置HTTP响应的server头，‘off’可以禁止返回server头。如果什么都不设置，就是返回默认Nginx的标识。
    server_tag motang;

    #连接超时时间
    #keepalive_timeout  0;
    keepalive_timeout  65;

    #开启gzip压缩
    gzip  on;
    gzip_disable "MSIE [1-6].";

    #设定请求缓冲
    client_header_buffer_size    128k;
    large_client_header_buffers  4 128k;

    #cache begin
    proxy_buffering on;
    proxy_cache_valid any 10m;
    proxy_cache_path /usr/local/nginx/cache/data levels=1:2 keys_zone=my-cache:8m max_size=1000m inactive=600m;
    proxy_temp_path /usr/local/nginx/cache/temp;
    proxy_buffer_size 4k;
    proxy_buffers 100 8k;
    #cache end

    #设定负载均衡的服务器列表
    upstream mysvr {
        #weigth参数表示权值，权值越高被分配到的几率越大
        server 192.168.128.128:8080 weight=5;
        #本机上的Squid开启3128端口,不是必须要squid
        server 192.168.128.129:8080    weight=1;
        server 192.168.128.128:8081    weight=6;
    }
        
    upstream mysvr2 {
        #weigth参数表示权值，权值越高被分配到的几率越大
        server 192.168.128.128:8080    weight=1;
        server 192.168.128.129:8080    weight=5;
    }

    error_page   400 405 500 502 503 504  /50x.html;
    error_page 404 /404.html;

    #设定虚拟主机配置
    server {
        #侦听80端口
        listen       80;
        server_name  localhost;

        #root html;

        #设置服务器的编码
        #charset koi8-r;
        charset utf-8;

        #设定本虚拟主机的访问日志
        #access_log  logs/host.access.log  main;

        # 定义错误提示页面
        # redirect server error pages to the static page /50x.html
        #error_page   400 405 500 502 503 504  /50x.html;
        #location = /50x.html {
        #    root   html;
        #}

        #error_page 404 default;

        location / {
            root   html;
            #定义首页索引文件的名称
            index  index.html index.htm;
        }
        
        location ^~ /NginxStatus/ {
            stub_status  on;
            server_info on;
	    access_log off;
            # 允许访问的 IP
            allow 192.168.128.1; 
            allow 192.168.128.128; 
            allow 127.0.0.1;
            deny all;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        location /docs {
            index index.html index.htm index.jsp;

            footer "<!-- $hostname, $year/$month/$day $hour:$minute:$second, $request -->";
            #proxy_pass   http://127.0.0.1:8080/docs;
            proxy_pass   http://mysvr2/docs;

            #以下是一些反向代理的配置可删除.
            proxy_redirect     off;
            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
            proxy_set_header   Host             $host;
            proxy_set_header   X-Real-IP        $remote_addr;
            proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
            #允许客户端请求的最大单文件字节数
            client_max_body_size 10m;
            #缓冲区代理缓冲用户端请求的最大字节数，
            client_body_buffer_size 128k;
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_max_temp_file_size 0;
            #nginx跟后端服务器连接超时时间(代理连接超时)
            proxy_connect_timeout      90;
            proxy_send_timeout         90;
            proxy_read_timeout         90;
            #设置代理服务器（nginx）保存用户头信息的缓冲区大小
            proxy_buffer_size          4k;
            #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置
            proxy_buffers              4 32k;
            #高负荷下缓冲大小（proxy_buffers*2）
            proxy_busy_buffers_size    64k;
            #设定缓存文件夹大小，大于这个值，将从upstream服务器传
            proxy_temp_file_write_size 64k;
        }

        location /examples {
            index index.html index.htm index.jsp;
            proxy_pass   http://mysvr2/examples;
            
            if ($request_method = POST) {
                return 405;
            }
        }

        #静态文件，nginx自己处理
        location ~* \.(gif|jpg|jpeg)$ {
            root  images;

            proxy_cache my-cache;
            proxy_cache_valid 200;

            #过期2天，静态文件不怎么更新，过期可以设大一点，
            #如果频繁更新，则可以设置得小一点。
            expires 2d;
        }

        #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.
        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        #禁止访问 .htxxx 文件
        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443;
    #    server_name  localhost;

    #    ssl                  on;
    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_timeout  5m;

    #    ssl_protocols  SSLv2 SSLv3 TLSv1;
    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers   on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
